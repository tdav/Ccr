<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="MDHybrid.Palette.xaml"/>
    <ResourceDictionary Source="MDHybrid.Text.xaml"/>
    <ResourceDictionary Source="MDHybrid.Drawables.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="MDH.Controls.Buttons.FlatButton"
         TargetType="Button"
         BasedOn="{StaticResource t14pButton}">
    <Setter Property="Foreground">
      <Setter.Value>
        <Binding RelativeSource="{RelativeSource AncestorType=FrameworkElement}" 
                 Path="(TextElement.Foreground)" />
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Padding" Value="5 3"/>
    <Setter Property="ClipToBounds" Value="False"/>
    <Setter Property="MaxHeight" Value="90"/>
    <Setter Property="MaxWidth" Value="90"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border Background="{TemplateBinding Background}"
                  Margin="{TemplateBinding Padding}">
            <Grid ClipToBounds="{TemplateBinding ClipToBounds}">
              <Ripple.TrackingService>
                <RippleMouseTrackingService EventName="Click">
                  <RippleMouseTrackingService.SourceObject>
                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=Button}"/>
                  </RippleMouseTrackingService.SourceObject>
                </RippleMouseTrackingService>
              </Ripple.TrackingService>
              <Canvas>
                <Canvas.RenderTransform>
                  <TranslateTransform>
                    <Ripple.Placement>
                      <MultiBinding Converter="{RipplePlacementConverter}">
                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="ActualHeight" ElementName="PART_Ripple"/>
                        <Binding Path="(Ripple.MousePosition)"
                                 RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
                      </MultiBinding>
                    </Ripple.Placement>
                  </TranslateTransform>
                </Canvas.RenderTransform>
                <Ellipse x:Name="PART_Ripple" 
                         RenderTransformOrigin=".5,.5" 
                         VerticalAlignment="Center"
                         HorizontalAlignment="Center"
                         IsHitTestVisible="False">
                  <Ellipse.RenderTransform>
                    <ScaleTransform ScaleX="0" ScaleY="0"/>
                  </Ellipse.RenderTransform>
                  <Ellipse.Fill>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                             Path="(MDH.VisualFeedback)"/>
                  </Ellipse.Fill>
                  <Ellipse.Height>
                    <MultiBinding Converter="{RippleDiameterConverter}" ConverterParameter="2">
                      <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="(Ripple.MousePosition)" 
                               RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
                    </MultiBinding>
                  </Ellipse.Height>
                  <Ellipse.Width>
                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight" />
                  </Ellipse.Width>
                </Ellipse>
              </Canvas>
              <Viewbox RenderTransformOrigin=".5,.5">
                <Viewbox.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform>
                      <ScaleTransform.ScaleY>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(IconAssist.Scale)"/>
                      </ScaleTransform.ScaleY>
                      <ScaleTransform.ScaleX>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(IconAssist.Scale)"/>
                      </ScaleTransform.ScaleX>
                    </ScaleTransform>
                    <RotateTransform>
                      <RotateTransform.Angle>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(IconAssist.Rotation)"/>
                      </RotateTransform.Angle>
                    </RotateTransform>
                  </TransformGroup>
                </Viewbox.RenderTransform>

                <ContentPresenter x:Name="PART_ContentPresenter"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                  Margin="{TemplateBinding Padding}"
                                  RenderTransformOrigin=".5,.5">
                  <ContentPresenter.RenderTransform>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                  </ContentPresenter.RenderTransform>
                </ContentPresenter>
              </Viewbox>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                     To="1.15"
                                     Duration="0:0:.15" />

                    <DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                     To="1.15"
                                     Duration="0:0:.15" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                     To="1" 
                                     Duration="0:0:.15" />

                    <DoubleAnimation Storyboard.TargetName="PART_ContentPresenter"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                     To="1" 
                                     Duration="0:0:.15" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
                                     Storyboard.TargetProperty="Opacity" 
                                     To="1" 
                                     Duration="0:0:.15" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentPresenter" 
                                     Storyboard.TargetProperty="Opacity" 
                                     To=".4" 
                                     Duration="0:0:.15" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="IsHitTestVisible" Value="False"/>
              <Setter TargetName="PART_ContentPresenter" Property="Opacity" Value=".4"/>
            </Trigger>
            <EventTrigger RoutedEvent="Click">
              <BeginStoryboard>
                <Storyboard SpeedRatio="2">
                  <DoubleAnimation Storyboard.TargetName="PART_Ripple"
                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                   From="0" 
                                   To=".6"
                                   Duration="0:0:0.75" 
                                   EasingFunction="{EaseIn }"/>

                  <DoubleAnimation Storyboard.TargetName="PART_Ripple"
                                   Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                   From="0" 
                                   To=".6"
                                   Duration="0:0:0.75" 
                                   EasingFunction="{EaseOut Quad}"/>

                  <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" 
                                                 Storyboard.TargetProperty="Opacity">
                    <SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.00"/>
                    <SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.10"/>
                    <SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.60"/>
                    <SplineDoubleKeyFrame Value="0" KeyTime="0:0:0.75"/>
                  </DoubleAnimationUsingKeyFrames>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MDH.Controls.Buttons.FlatButton.DarkSurface" 
         TargetType="Button" 
         BasedOn="{StaticResource MDH.Controls.Buttons.FlatButton}">
    <Setter Property="MDH.VisualFeedback" Value="{StaticResource MDH.Palette.Grey.300}"/>
  </Style>
  <Style x:Key="MDH.Controls.Buttons.FlatButton.LightSurface" 
         TargetType="Button" 
         BasedOn="{StaticResource MDH.Controls.Buttons.FlatButton}">
    <Setter Property="MDH.VisualFeedback" Value="{StaticResource MDH.Palette.Grey.700}"/>
  </Style>

  <Style x:Key="MDH.Controls.Buttons.FlatButton.DarkSurface.CollapseIfDisabled" 
         TargetType="Button" 
         BasedOn="{StaticResource MDH.Controls.Buttons.FlatButton.DarkSurface}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Visibility" Value="Collapsed"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MDH.Controls.Buttons.FlatButton.LightSurface.CollapseIfDisabled" 
         TargetType="Button" 
         BasedOn="{StaticResource MDH.Controls.Buttons.FlatButton.LightSurface}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Visibility" Value="Collapsed"/>
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>