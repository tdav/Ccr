<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
										xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
										xmlns:markup="http://schemas.microsoft.com/winfx/2006/xaml">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="MDHybrid.Palette.Brushes.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<Style TargetType="ListView">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
	</Style>

	<Style TargetType="ListViewItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<ContentPresenter x:Name="PART_content">
						<ContentPresenter.RenderTransform>
							<TranslateTransform x:Name="PART_contenttranslate"/>
						</ContentPresenter.RenderTransform>
					</ContentPresenter>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--<Style TargetType="ListViewItem" x:Key="RippleLVIDarkStyle">
		<Setter Property="primitives:VisualFeedback.Brush">
			<Setter.Value>
				<SolidColorBrush Color="White" Opacity=".15"/>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Grid x:Name="PART_Root" ClipToBounds="True">
						<i:Interaction.Behaviors>
							<ripples:RippleMouseTracker EventName="Selected">
								<ripples:RippleMouseTracker.SourceObject>
									<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=ListViewItem}" />
								</ripples:RippleMouseTracker.SourceObject>
							</ripples:RippleMouseTracker>
						</i:Interaction.Behaviors>
						<Grid.Background>
							<SolidColorBrush Opacity="0" Color="White"/>
						</Grid.Background>
						<Canvas>
							<Canvas.RenderTransform>
								<TranslateTransform >
									<ripples:RippleFinal.Placement>
										<MultiBinding Converter="{ripples:DynamicRipplePlacementConverter}">
											<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ActualHeight" ElementName="PART_Ripple"/>
											<Binding Path="(ripples:RippleFinal.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
										</MultiBinding>
									</ripples:RippleFinal.Placement>
								</TranslateTransform>
							</Canvas.RenderTransform>
							<Ellipse x:Name="PART_Ripple" RenderTransformOrigin=".5,.5"
																	VerticalAlignment="Center" HorizontalAlignment="Center"
																	IsHitTestVisible="False">
								<Ellipse.RenderTransform>
									<ScaleTransform ScaleX="0" ScaleY="0"/>
								</Ellipse.RenderTransform>
								<Ellipse.Fill>
									<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(primitives:VisualFeedback.Brush)"/>
								</Ellipse.Fill>
								<Ellipse.Height>
									<MultiBinding Converter="{ripples:DynamicRippleDiameterConverter}" ConverterParameter="2">
										<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="(ripples:RippleFinal.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
									</MultiBinding>
								</Ellipse.Height>
								<Ellipse.Width>
									<Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight" />
								</Ellipse.Width>
							</Ellipse>
						</Canvas>
						<ContentPresenter x:Name="PART_content" ClipToBounds="True"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Root" Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
																		 To=".02" Duration="0:0:.1" />

									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Root" Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
																		 To="0" Duration="0:0:.1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<EventTrigger RoutedEvent="ListViewItem.Selected">
							<BeginStoryboard>
								<Storyboard SpeedRatio="1">
									<DoubleAnimation Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
																											From="0" To="1" Duration="0:0:0.6" EasingFunction="{Ease Out, Quad}"/>

									<DoubleAnimation Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
																											From="0" To="1" Duration="0:0:0.6" EasingFunction="{Ease Out, Quad}"/>

									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity">
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.00"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.05"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.60"/>
										<SplineDoubleKeyFrame Value="0" KeyTime="0:0:0.75"/>
									</DoubleAnimationUsingKeyFrames>

								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

	<Style TargetType="ListViewItem" x:Key="RippleLVIDarkStyle">
		<Setter Property="MDH.VisualFeedback">
			<Setter.Value>
				<SolidColorBrush Color="White" Opacity=".15"/>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Grid x:Name="PART_Root" ClipToBounds="True">
						<Ripple.TrackingService>
							<RippleMouseTrackingService EventName="Selected">
								<RippleMouseTrackingService.SourceObject>
									<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=ListViewItem}"/>
								</RippleMouseTrackingService.SourceObject>
							</RippleMouseTrackingService>
						</Ripple.TrackingService>

						<Grid.Background>
							<SolidColorBrush Opacity="0" Color="White"/>
						</Grid.Background>

						<Canvas x:Name="PART_RippleContainer">
							<Canvas.RenderTransform>
								<TranslateTransform>
									<Ripple.Placement>
										<MultiBinding Converter="{RipplePlacementConverter}">
											<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding ElementName="PART_Ripple" Path="ActualHeight"/>
											<Binding Path="(Ripple.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
										</MultiBinding>
									</Ripple.Placement>
								</TranslateTransform>
							</Canvas.RenderTransform>

							<Ellipse x:Name="PART_Ripple"
											 RenderTransformOrigin=".5,.5"
											 VerticalAlignment="Center"
											 HorizontalAlignment="Center"
											 IsHitTestVisible="False">
								<Ellipse.RenderTransform>
									<ScaleTransform ScaleX="0" ScaleY="0"/>
								</Ellipse.RenderTransform>
								<Ellipse.Fill>
									<Binding Path="(MDH.VisualFeedback)" RelativeSource="{RelativeSource TemplatedParent}"/>
								</Ellipse.Fill>
								<Ellipse.Height>
									<MultiBinding Converter="{RippleDiameterConverter}" ConverterParameter="2">
										<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="(Ripple.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
									</MultiBinding>
								</Ellipse.Height>
								<Ellipse.Width>
									<Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight"/>
								</Ellipse.Width>
							</Ellipse>
						</Canvas>

						<ContentPresenter x:Name="PART_content" ClipToBounds="True"/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Root"
																		 Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
																		 To=".02"
																		 Duration="0:0:.1"/>

									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Root"
																		 Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
																		 To="0"
																		 Duration="0:0:.1"/>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>

						<EventTrigger RoutedEvent="ListViewItem.Selected">
							<BeginStoryboard>
								<Storyboard SpeedRatio="1">
									<DoubleAnimation Storyboard.TargetName="PART_Ripple"
																	 Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
																	 From="0"
																	 To="1"
																	 Duration="0:0:0.6"
																	 EasingFunction="{EaseOut Quad}"/>

									<DoubleAnimation Storyboard.TargetName="PART_Ripple"
																	 Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
																	 From="0"
																	 To="1"
																	 Duration="0:0:0.6"
																	 EasingFunction="{EaseOut Quad}"/>

									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity">
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.00"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.05"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.60"/>
										<SplineDoubleKeyFrame Value="0" KeyTime="0:0:0.75"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  TODO dark style has white with opacity 0 background mouseover fade to grey... should this have a black brush opacity 0? also reference global ripple color in button.xaml  -->
	<Style TargetType="ListViewItem"
				 x:Key="RippleLVILightStyle"
				 BasedOn="{StaticResource RippleLVIDarkStyle}">
		<Setter Property="MDH.VisualFeedback">
			<Setter.Value>
				<SolidColorBrush Color="{Binding Source={StaticResource MDH.Palette.BlueGrey.900}, Path=Color}" Opacity=".15"/>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="ListViewItem"
				 x:Key="RippleLVILightStyleCheckable"
				 BasedOn="{StaticResource RippleLVIDarkStyle}">
		<Setter Property="MDH.VisualFeedback">
			<Setter.Value>
				<SolidColorBrush Color="{Binding Source={StaticResource MDH.Palette.BlueGrey.900}, Path=Color}" Opacity=".15"/>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Grid x:Name="PART_Root" ClipToBounds="True">
						<Ripple.TrackingService>
							<RippleMouseTrackingService EventName="Selected">
								<RippleMouseTrackingService.SourceObject>
									<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=ListViewItem}"/>
								</RippleMouseTrackingService.SourceObject>
							</RippleMouseTrackingService>
						</Ripple.TrackingService>

						<Grid.Background>
							<SolidColorBrush Opacity="0" Color="White"/>
						</Grid.Background>

						<Canvas x:Name="PART_RippleContainer">
							<Canvas.RenderTransform>
								<TranslateTransform>
									<Ripple.Placement>
										<MultiBinding Converter="{RipplePlacementConverter}">
											<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding ElementName="PART_Ripple" Path="ActualHeight"/>
											<Binding Path="(Ripple.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
										</MultiBinding>
									</Ripple.Placement>
								</TranslateTransform>
							</Canvas.RenderTransform>

							<Ellipse x:Name="PART_Ripple"
											 RenderTransformOrigin=".5,.5"
											 VerticalAlignment="Center"
											 HorizontalAlignment="Center"
											 IsHitTestVisible="False">
								<Ellipse.RenderTransform>
									<ScaleTransform ScaleX="0" ScaleY="0"/>
								</Ellipse.RenderTransform>
								<Ellipse.Fill>
									<Binding Path="(MDH.VisualFeedback)" RelativeSource="{RelativeSource TemplatedParent}"/>
								</Ellipse.Fill>
								<Ellipse.Height>
									<MultiBinding Converter="{RippleDiameterConverter}" ConverterParameter="2">
										<Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="(Ripple.MousePosition)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Grid}"/>
									</MultiBinding>
								</Ellipse.Height>
								<Ellipse.Width>
									<Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight"/>
								</Ellipse.Width>
							</Ellipse>
						</Canvas>

						<ContentPresenter x:Name="PART_content" ClipToBounds="True"/>

						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition/>
							</Grid.ColumnDefinitions>
							<Viewbox x:Name="PART_SelectedIcon"
											 Opacity="0"
											 Height="80"
											 Width="80">
								<Icon Kind="CheckCircle" Foreground="{StaticResource MDH.Palette.Green.A400}"/>
							</Viewbox>
							<!--<ContentPresenter x:Name="PART_content"
																									Grid.Column="1"
																									ClipToBounds="True"/>-->
						</Grid>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Root"
																		 Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
																		 To=".02"
																		 Duration="0:0:.1"/>

									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Root"
																		 Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
																		 To="0"
																		 Duration="0:0:.1"/>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_SelectedIcon"
																		 Storyboard.TargetProperty="Opacity"
																		 To="1"
																		 Duration="0:0:.2"/>

									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_SelectedIcon"
																		 Storyboard.TargetProperty="Opacity"
																		 To="0"
																		 Duration="0:0:.2"/>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<EventTrigger RoutedEvent="ListViewItem.Selected">
							<BeginStoryboard>
								<Storyboard SpeedRatio="1">
									<DoubleAnimation Storyboard.TargetName="PART_Ripple"
																	 Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
																	 From="0"
																	 To="1"
																	 Duration="0:0:0.6"
																	 EasingFunction="{EaseOut Quad}"/>

									<DoubleAnimation Storyboard.TargetName="PART_Ripple"
																	 Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
																	 From="0"
																	 To="1"
																	 Duration="0:0:0.6"
																	 EasingFunction="{EaseOut Quad}"/>

									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity">
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.00"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.05"/>
										<SplineDoubleKeyFrame Value="1" KeyTime="0:0:0.60"/>
										<SplineDoubleKeyFrame Value="0" KeyTime="0:0:0.75"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



	<Style x:Key="MaterialDesignExpanderToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualStateGroup.Transitions>
									<VisualTransition From="Unchecked" To="Checked">
										<VisualTransition.GeneratedEasingFunction>
											<QuarticEase EasingMode="EaseOut"/>
										</VisualTransition.GeneratedEasingFunction>
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
												<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition GeneratedDuration="0" To="Unchecked">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
												<EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition GeneratedDuration="0" To="Checked">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
												<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition From="Checked"
																		GeneratedDuration="0"
																		To="Unchecked">
										<VisualTransition.GeneratedEasingFunction>
											<QuarticEase EasingMode="EaseOut"/>
										</VisualTransition.GeneratedEasingFunction>
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
												<EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
											<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
											<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Icon Kind="ChevronDown"
									Opacity=".38"
									x:Name="ExpandPath"
									RenderTransformOrigin="0.5,0.5"
									Height="24"
									Width="24"
									Foreground="{TemplateBinding Foreground}">
							<Icon.RenderTransform>
								<TransformGroup>
									<ScaleTransform/>
									<SkewTransform/>
									<RotateTransform/>
									<TranslateTransform/>
								</TransformGroup>
							</Icon.RenderTransform>
						</Icon>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialDesignExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalAlignment" Value="Left"/>
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}" Padding="12 24 12 24">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition/>
							</Grid.RowDefinitions>
							<ToggleButton Grid.Row="0"
														HorizontalAlignment="Center"
														Foreground="{TemplateBinding Foreground}"
														IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
														Style="{StaticResource MaterialDesignExpanderToggleButton}"
														RenderTransformOrigin="0.5,0.5">
								<ToggleButton.RenderTransform>
									<RotateTransform Angle="-90"/>
								</ToggleButton.RenderTransform>
							</ToggleButton>
							<ContentPresenter Grid.Row="1"
																HorizontalAlignment="Center"
																Margin="0 16 0 0"
																Content="{TemplateBinding Content}"
																ContentTemplate="{TemplateBinding ContentTemplate}"
																ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
																ContentStringFormat="{TemplateBinding ContentStringFormat}"
																VerticalAlignment="Top"/>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialDesignExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalAlignment" Value="Right"/>
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}" Padding="12 24 12 24">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition/>
							</Grid.RowDefinitions>
							<ToggleButton Grid.Row="0"
														HorizontalAlignment="Center"
														Foreground="{TemplateBinding Foreground}"
														IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
														Style="{StaticResource MaterialDesignExpanderToggleButton}"
														RenderTransformOrigin="0.5,0.5">
								<ToggleButton.RenderTransform>
									<RotateTransform Angle="90"/>
								</ToggleButton.RenderTransform>
							</ToggleButton>
							<ContentPresenter Grid.Row="1"
																HorizontalAlignment="Center"
																Margin="0 16 0 0"
																Content="{TemplateBinding Content}"
																ContentTemplate="{TemplateBinding ContentTemplate}"
																ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
																ContentStringFormat="{TemplateBinding ContentStringFormat}"
																VerticalAlignment="Top"/>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialDesignExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}" Padding="24 12 24 12">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<ContentPresenter Content="{TemplateBinding Content}"
																ContentTemplate="{TemplateBinding ContentTemplate}"
																ContentStringFormat="{TemplateBinding ContentStringFormat}"
																ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
																VerticalAlignment="Center"
																Margin="0 0 16 0"/>
							<ToggleButton Grid.Column="1"
														VerticalAlignment="Center"
														Foreground="{TemplateBinding Foreground}"
														IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
														Style="{StaticResource MaterialDesignExpanderToggleButton}"/>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialDesignExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}" Padding="24 12 24 12">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<ContentPresenter VerticalAlignment="Center"
																Content="{TemplateBinding Content}"
																ContentTemplate="{TemplateBinding ContentTemplate}"
																ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
																ContentStringFormat="{TemplateBinding ContentStringFormat}"
																Margin="0 0 16 0"/>
							<ToggleButton IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
														VerticalAlignment="Center"
														Foreground="{TemplateBinding Foreground}"
														Style="{StaticResource MaterialDesignExpanderToggleButton}"
														RenderTransformOrigin="0.5,0.5"
														Grid.Column="1">
								<ToggleButton.RenderTransform>
									<RotateTransform Angle="-180"/>
								</ToggleButton.RenderTransform>
							</ToggleButton>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialDesignExpander" TargetType="{x:Type Expander}">
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Background" Value="{StaticResource MDH.Palette.BlueGrey.800}"/>
		<Setter Property="Foreground" Value="{StaticResource MDH.Palette.BlueGrey.200}"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Top"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="ExpansionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" To="Expanded">
										<VisualTransition.GeneratedEasingFunction>
											<CubicEase EasingMode="EaseOut"/>
										</VisualTransition.GeneratedEasingFunction>
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimation Storyboard.TargetProperty="Opacity"
																			 Storyboard.TargetName="PART_Content"
																			 To="1"
																			 Duration="0:0:0.3"/>
										</Storyboard>
									</VisualTransition>
									<VisualTransition GeneratedDuration="0" To="Collapsed">
										<VisualTransition.GeneratedEasingFunction>
											<CubicEase EasingMode="EaseOut"/>
										</VisualTransition.GeneratedEasingFunction>
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimation Storyboard.TargetProperty="Opacity"
																			 Storyboard.TargetName="PART_Content"
																			 To="0"
																			 Duration="0:0:0.3"/>
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Expanded">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
																		 Storyboard.TargetName="PART_Content"
																		 To="1"
																		 Duration="0"/>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Collapsed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
																		 Storyboard.TargetName="PART_Content"
																		 To="0"
																		 Duration="0"/>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<DockPanel Background="{TemplateBinding Background}">
							<ToggleButton Name="HeaderSite"
														Focusable="False"
														IsTabStop="False"
														DockPanel.Dock="Top"
														BorderThickness="0"
														Cursor="Hand"
														IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
														Style="{StaticResource MaterialDesignExpanderDownHeaderStyle}"
														TextElement.FontSize="15"
														Opacity=".87"
														Foreground="{TemplateBinding Foreground}"
														Content="{TemplateBinding Header}"
														ContentTemplate="{TemplateBinding HeaderTemplate}"
														ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
														ContentStringFormat="{TemplateBinding HeaderStringFormat}"/>
							<Border Name="ContentSite" DockPanel.Dock="Bottom">
								<StackPanel Name="ContentPanel"
														HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														Margin="{TemplateBinding Padding}"
														VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<StackPanel.Height>
										<MultiBinding Converter="{MultiplyMultiConverter}">
											<Binding ElementName="PART_Content" Path="ActualHeight"/>
											<Binding ElementName="PART_Content" Path="Opacity"/>
										</MultiBinding>
									</StackPanel.Height>
									<StackPanel.Width>
										<MultiBinding Converter="{MultiplyMultiConverter}">
											<Binding ElementName="PART_Content" Path="ActualWidth"/>
											<Binding ElementName="PART_Content" Path="Opacity"/>
										</MultiBinding>
									</StackPanel.Width>
									<ContentPresenter Name="PART_Content"
																		Focusable="False"
																		ContentTemplate="{TemplateBinding ContentTemplate}"
																		ContentStringFormat="{TemplateBinding ContentStringFormat}"
																		ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
								</StackPanel>
							</Border>
						</DockPanel>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="ExpandDirection" Value="Right">
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
							<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
							<Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
							<Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignExpanderRightHeaderStyle}"/>
						</Trigger>

						<Trigger Property="ExpandDirection" Value="Left">
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
							<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
							<Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
							<Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignExpanderLeftHeaderStyle}"/>
						</Trigger>

						<Trigger Property="ExpandDirection" Value="Up">
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
							<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
							<Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
							<Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignExpanderUpHeaderStyle}"/>
						</Trigger>

						<Trigger Property="ExpandDirection" Value="Down">
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
							<Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
							<Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignExpanderDownHeaderStyle}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
